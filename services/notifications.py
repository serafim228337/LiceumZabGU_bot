import logging
from datetime import datetime, timedelta

import pytz
from aiogram import Bot
from sqlalchemy import select

from database.db import get_db
from database.models import Event, Group

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+9 (Asia/Tokyo)
JST = pytz.timezone('Asia/Tokyo')


async def send_event_reminders(bot: Bot) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (—Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –≤ 20:00 JST)."""
    async for db in get_db():
        try:
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ JST
            now = datetime.now(JST)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å ~20:00 (–¥–æ–ø—É—Å–∫ 5 –º–∏–Ω—É—Ç)
            if now.hour != 20 or now.minute > 5:
                logger.info("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–Ω–µ 20:00 JST).")
                return False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
            tomorrow = now + timedelta(days=1)
            start_of_tomorrow = tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)
            end_of_tomorrow = start_of_tomorrow + timedelta(days=1, microseconds=-1)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–≤—Ç—Ä–∞
            events = await db.execute(
                select(Event).where(
                    Event.date.between(start_of_tomorrow, end_of_tomorrow)
                )
            )
            events = events.scalars().all()

            if not events:
                logger.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
            groups = await db.execute(select(Group))
            groups = groups.scalars().all()

            for event in events:
                for group in groups:
                    try:
                        await bot.send_message(
                            chat_id=group.chat_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–±—ã—Ç–∏–µ '{event.title}' —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"
                                 f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d %H:%M')}\n"
                                 f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event.description}"
                        )
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.group_name} –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event.title}'.")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ {group.group_name}: {e}")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ send_event_reminders: {e}")
            return False


async def send_forced_event_reminders(bot: Bot) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
       –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –∏–Ω–∞—á–µ ‚Äì True."""
    async for db in get_db():
        try:
            now = datetime.utcnow().replace(tzinfo=pytz.utc).astimezone(JST)
            start_of_tomorrow = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
            end_of_tomorrow = start_of_tomorrow + timedelta(days=1, microseconds=-1)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –∑–∞–≤—Ç—Ä–∞
            events = await db.execute(
                select(Event).where(
                    Event.date.between(
                        start_of_tomorrow,
                        end_of_tomorrow
                    )
                )
            )
            events = events.scalars().all()

            if not events:
                logger.info("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            groups = await db.execute(select(Group))
            groups = groups.scalars().all()

            for event in events:
                for group in groups:
                    try:
                        await bot.send_message(
                            chat_id=group.chat_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–±—ã—Ç–∏–µ '{event.title}' –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"
                                 f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d %H:%M')}\n"
                                 f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event.description}"
                        )
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group.group_name} –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event.title}'.")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ {group.group_name}: {e}")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ send_forced_event_reminders: {e}")
            return False
