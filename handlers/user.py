import logging

from aiogram import Router, F
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove
from sqlalchemy import select
from sqlalchemy.testing.plugin.plugin_base import config

from config.config import schedule_link
from database.db import get_db
from database.models import Event, User
from keyboards.all_kb import main_kb, catalog_kb
from services.db_operations import get_user_by_id, add_user_to_db



logger = logging.getLogger(__name__)
router = Router()
router.message.filter(F.chat.type == ChatType.PRIVATE)

import datetime

def get_week_type(date=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤–µ—Ä—Ö–Ω—è—è –∏–ª–∏ –Ω–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è."""
    if date is None:
        date = datetime.date.today()
    week_number = date.isocalendar()[1]  # –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
    return "–≤–µ—Ä—Ö–Ω—è—è" if week_number % 2 == 0 else "–Ω–∏–∂–Ω—è—è"

@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    async for db in get_db():
        user = await get_user_by_id(db, user_id)
        if not user:
            user = await add_user_to_db(db, user_id, username, full_name)
            response = f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
        else:
            response = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!"

        await message.answer(
            response,
            reply_markup=main_kb(message.from_user.id, message.chat.type)
        )

@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def send_schedule_link_text(message: Message):
    week_type = get_week_type()

    await message.answer(
        f"*üóìÔ∏è –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_type.upper()}*\n"
        f"[–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ]({schedule_link})",
        parse_mode="MarkdownV2"
    )


@router.message(Command("schedule"))
async def send_schedule_link(message: Message):
    week_type = get_week_type()

    await message.answer(
        f"*üóìÔ∏è –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_type.upper()}*\n"
        f"[–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ]({schedule_link})",
        parse_mode="MarkdownV2"
    )

@router.message(F.text == "–û –Ω–∞c")
async def about_us(message: Message):
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∞–π—Ç –ó–∞–±–ì–£", url="https://zabgu.ru/php/index.php")],
            [InlineKeyboardButton(text="–°–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url="https://vk.com/dear_lyceum")],
            [InlineKeyboardButton(text="–ì—Ä—É–ø–ø–∞ –≤ Telegram", url="https://t.me/lyceum_zabgu")],
        ]
    )
    await message.answer("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=inline_kb)


@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=catalog_kb())


@router.message(Command("events"))
@router.message(F.text == "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def show_events(message: Message):
    async for db in get_db():
        events = await db.execute(select(Event).where(Event.date >= datetime.datetime.now()).order_by(Event.date))
        events = events.scalars().all()

        if not events:
            await message.answer("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
            return

        response = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for event in events:
            response += (
                f"üìÖ {event.title}\n"
                f"üìù {event.description}\n"
                f"‚è∞ {event.date.strftime('%Y-%m-%d %H:%M')}\n\n"
            )
        await message.answer(
            response,
            reply_markup=main_kb(message.from_user.id, message.chat.type, '/events')
        )


@router.message(F.text == "–£—á–∏—Ç–µ–ª—è")
async def teachers_list(message: Message):
    async for db in get_db():
        result = await db.execute(select(User).where(User.role == "—É—á–∏—Ç–µ–ª—å"))
        teachers = result.scalars().all()

        if not teachers:
            await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        response = "<b>–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π:</b>\n"
        for teacher in teachers:
            response += (
                f"\n<b>{teacher.full_name}</b>\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {teacher.contact_info}\n"
            )
        await message.answer(response, parse_mode="HTML")


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_kb(message.from_user.id, message.chat.type)
    )
