import logging
import re
from datetime import datetime

from aiogram import Bot, Router, F
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy import select

from database.db import get_db
from database.models import AdminLog, Event, Group
from filters.is_admin import is_admin
from keyboards.admin_panel import admin_panel
from keyboards.all_kb import main_kb
from services.admin_logger import log_admin_action
from services.group_operations import get_all_groups
from services.log_cleaner import clean_old_logs
from services.notifications import send_forced_event_reminders

router = Router()
storage = MemoryStorage()
logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
class SendMessageState(StatesGroup):
    waiting_for_message = State()


class AddEventState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_date = State()


class SendMessageState(StatesGroup):
    waiting_for_class_number = State()
    waiting_for_class_letter = State()
    waiting_for_message = State()
    waiting_for_confirmation = State()


@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: Message, state: FSMContext):
    await state.clear()
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())


@router.message(F.text == "–†–∞–∑–æ—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏")
@router.message(Command("send_reminders"))
async def on_forced_reminder_command(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /send_reminders."""
    await state.clear()
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    result = await send_forced_event_reminders(bot)
    if result:
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–°–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç.")

    await log_admin_action(
        message.from_user.id,
        "force_reminder_send",
        f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    )


@router.message(Command("add_group"))
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def add_group_handler_text(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    await state.clear()
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if message.chat.type in (ChatType.GROUP, ChatType.SUPERGROUP):
        chat_id = str(message.chat.id)
        group_name = message.chat.title

        async for db in get_db():
            group = await db.execute(select(Group).where(Group.chat_id == chat_id))
            group = group.scalar_one_or_none()

            if group:
                await message.answer(f"–ì—Ä—É–ø–ø–∞ '{group_name}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            else:
                new_group = Group(chat_id=chat_id, group_name=group_name)
                db.add(new_group)
                await db.commit()
                await db.refresh(new_group)
                await message.answer(f"–ì—Ä—É–ø–ø–∞ '{group_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_group <chat_id> <group_name>")


@router.message(Command("list_groups"))
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
async def list_groups_handler_text(message: Message, state: FSMContext):
    await state.clear()
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async for db in get_db():
        groups = await get_all_groups(db)
        if not groups:
            await message.answer("–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        response = "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
        for group in groups:
            response += f"{group.group_name} (chat_id: {group.chat_id})\n"
        await message.answer(response, reply_markup=admin_panel())


def extract_class_info(group_name: str) -> tuple[str, str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: 10–ê, 10 –ê, 10-–ê, 10 - –ê –∏ —Ç.–¥.
    match = re.search(r'(\d{1,2})\s*[-]?\s*([–ê-–ìA-Z–∞-–≥a-z])', group_name)
    if match:
        return match.group(1), match.group(2).upper()
    return None, None


@router.message(F.text == "–†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
@router.message(Command("send_message"))
async def send_message_command(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        await state.clear()
        return

    class_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="8"), KeyboardButton(text="9")],
            [KeyboardButton(text="10"), KeyboardButton(text="11")],
            [KeyboardButton(text="–í–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=class_kb)
    await state.set_state(SendMessageState.waiting_for_class_number)


@router.message(SendMessageState.waiting_for_class_number)
async def process_class_number(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel())

    valid_classes = ["8", "9", "10", "11", "–í–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã"]
    if message.text not in valid_classes:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

    await state.update_data(class_number=message.text)

    letter_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê"), KeyboardButton(text="–ë")],
            [KeyboardButton(text="–í"), KeyboardButton(text="–ì")],
            [KeyboardButton(text="–í–æ –≤—Å–µ –±—É–∫–≤—ã"), KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", reply_markup=letter_kb)
    await state.set_state(SendMessageState.waiting_for_class_letter)


@router.message(SendMessageState.waiting_for_class_letter)
async def process_class_letter(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel())

    if message.text == "–ù–∞–∑–∞–¥":
        return await send_message_command(message, state)

    valid_letters = ["–ê", "–ë", "–í", "–ì", "–í–æ –≤—Å–µ –±—É–∫–≤—ã"]
    if message.text not in valid_letters:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

    await state.update_data(class_letter=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SendMessageState.waiting_for_message)


@router.message(SendMessageState.waiting_for_message)
async def process_message_input(message: Message, state: FSMContext):
    await state.update_data(message_text=message.text)
    data = await state.get_data()

    class_info = ""
    if data['class_number'] != "–í–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã":
        class_info = f"–¥–ª—è {data['class_number']} –∫–ª–∞—Å—Å–∞"
        if data['class_letter'] != "–í–æ –≤—Å–µ –±—É–∫–≤—ã":
            class_info += f" {data['class_letter']}"

    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç")],
            [KeyboardButton(text="üîô –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É {class_info}:\n\n"
        f"---\n"
        f"{message.text}\n"
        f"---\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {class_info or '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'}",
        reply_markup=confirm_kb
    )
    await state.set_state(SendMessageState.waiting_for_confirmation)


@router.message(SendMessageState.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext, bot: Bot):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        return await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel())

    if message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(SendMessageState.waiting_for_message)
        return

    if message.text == "üîô –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å":
        await send_message_command(message, state)
        return

    if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É":
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    data = await state.get_data()
    message_text = data['message_text']
    class_number = data.get('class_number')
    class_letter = data.get('class_letter')

    sent_count = 0
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = await db.execute(select(Group))
        groups = groups.scalars().all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É –∏ –±—É–∫–≤–µ –∫–ª–∞—Å—Å–∞
        filtered_groups = []
        for group in groups:
            group_class_num, group_class_letter = extract_class_info(group.group_name)

            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            num_match = (class_number == "–í–æ –≤—Å–µ –∫–ª–∞—Å—Å—ã" or
                         (group_class_num and group_class_num == class_number))

            # –ï—Å–ª–∏ –±—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            letter_match = (class_letter == "–í–æ –≤—Å–µ –±—É–∫–≤—ã" or
                            (group_class_letter and group_class_letter == class_letter))

            if num_match and letter_match:
                filtered_groups.append(group)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        for group in filtered_groups:
            try:
                await bot.send_message(
                    chat_id=group.chat_id,
                    text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {class_number or '–≤—Å–µ—Ö'} –∫–ª–∞—Å—Å–∞ {class_letter or '–≤—Å–µ—Ö –±—É–∫–≤'}:\n\n{message_text}"
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group.group_name} (ID: {group.chat_id}): {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await log_admin_action(
            message.from_user.id,
            "mass_message",
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count} –≥—Ä—É–ø–ø. –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: –∫–ª–∞—Å—Å {class_number or '–≤—Å–µ'}{class_letter or ''}"
        )

    await message.answer(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
        f"‚Ä¢ –ì—Ä—É–ø–ø: {sent_count}",
        reply_markup=admin_panel()
    )
    await state.clear()


@router.message(F.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é.", reply_markup=main_kb(message.from_user.id))


@router.message(Command("add_event"))
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def add_event_start_text(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await state.clear()
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(AddEventState.waiting_for_title)


@router.message(AddEventState.waiting_for_title)
async def add_event_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(AddEventState.waiting_for_description)


@router.message(AddEventState.waiting_for_description)
async def add_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    await state.set_state(AddEventState.waiting_for_date)


@router.message(AddEventState.waiting_for_date)
async def add_event_date(message: Message, state: FSMContext):
    try:
        event_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    async for db in get_db():
        new_event = Event(
            title=data["title"],
            description=data["description"],
            date=event_date,
            created_by=message.from_user.id
        )
        db.add(new_event)
        await db.commit()
        await db.refresh(new_event)

    await log_admin_action(
        message.from_user.id,
        "event_added",
        f"–°–æ–±—ã—Ç–∏–µ: {data['title']}, –¥–∞—Ç–∞: {event_date}"
    )

    await message.answer(f"–°–æ–±—ã—Ç–∏–µ '{data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
@router.message(Command("logs"))
async def show_logs(message: Message):
    if not is_admin(message.from_user.id):
        return

    async for db in get_db():
        logs = await db.execute(select(AdminLog).order_by(AdminLog.created_at.desc()).limit(50))
        logs = logs.scalars().all()

        if not logs:
            await message.answer("–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        response = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
        for log in logs:
            response += (
                f"üïí {log.created_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"üë§ ID: {log.admin_id}\n"
                f"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {log.action}\n"
                f"üìÑ –î–µ—Ç–∞–ª–∏: {log.details or '–Ω–µ—Ç'}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        for i in range(0, len(response), 4000):
            await message.answer(response[i:i + 4000])


@router.message(Command("clean_logs"))
@router.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
async def clean_logs_command(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

    try:
        days = 30  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
        deleted_count = await clean_old_logs(days)
        await message.answer(f"–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {str(e)}")
