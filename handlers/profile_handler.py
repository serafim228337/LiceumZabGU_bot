from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from database.db import get_db
from keyboards.all_kb import main_kb
from keyboards.all_kb import skip_kb
from services.db_operations import get_user_by_id, update_user_profile

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
class UserProfileState(StatesGroup):
    waiting_for_role = State()  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è —Ä–æ–ª–∏
    waiting_for_full_name = State()
    waiting_for_class = State()
    waiting_for_class_letter = State()
    waiting_for_subjects = State()
    waiting_for_contact_info = State()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(F.text == "/cancel")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb(message.from_user.id))


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    async for db in get_db():
        user = await get_user_by_id(db, message.from_user.id)
        if user:
            role = user.role.capitalize() if user.role else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
            class_number = user.class_number if user.role == '—É—á–µ–Ω–∏–∫' else 'N/A'
            class_letter = user.class_letter if user.role == '—É—á–µ–Ω–∏–∫' else 'N/A'
            contact_info = user.contact_info if user.contact_info else '–ù–µ —É–∫–∞–∑–∞–Ω'

            profile_text = (
                f"–§–ò–û: {user.full_name}\n"
                f"–ö–ª–∞—Å—Å: {class_number}\n"
                f"–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞: {class_letter}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {contact_info}\n"
                f"–†–æ–ª—å: {role}\n"
            )
        else:
            profile_text = "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        update_button = KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
        main_menu_button = KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        reply_kb = ReplyKeyboardMarkup(
            keyboard=[[update_button, main_menu_button]],
            resize_keyboard=True
        )
        await message.answer(profile_text, reply_markup=reply_kb)


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb(message.from_user.id))


@router.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
async def update_profile_callback(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role_button_1 = KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")
    role_button_2 = KeyboardButton(text="–£—á–µ–Ω–∏–∫")
    role_button_3 = KeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å")
    cancel_button = KeyboardButton(text="/cancel")
    role_kb = ReplyKeyboardMarkup(keyboard=[[role_button_1], [role_button_2], [role_button_3], [cancel_button]],
                                  resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–£—á–∏—Ç–µ–ª—å, –£—á–µ–Ω–∏–∫, –†–æ–¥–∏—Ç–µ–ª—å):", reply_markup=role_kb)
    await state.set_state(UserProfileState.waiting_for_role)


@router.message(UserProfileState.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    role = message.text.lower()
    await state.update_data(role=role)
    if role == "—É—á–µ–Ω–∏–∫":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_full_name)
    elif role == "—Ä–æ–¥–∏—Ç–µ–ª—å":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
            "- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "- Telegram-–∞–∫–∫–∞—É–Ω—Ç\n"
            "- –°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
            "- –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è.",
            reply_markup=skip_kb()
        )
        await state.set_state(UserProfileState.waiting_for_contact_info)
    elif role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_full_name)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û ---
@router.message(UserProfileState.waiting_for_full_name, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=None)
    user_data = await state.get_data()
    role = user_data['role']
    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_subjects)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=skip_kb("8", "9", "10", "11"))
        await state.set_state(UserProfileState.waiting_for_class)


@router.message(UserProfileState.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    user_data = await state.get_data()
    role = user_data['role']
    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_subjects)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=skip_kb("8", "9", "10", "11"))
        await state.set_state(UserProfileState.waiting_for_class)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ ---
@router.message(UserProfileState.waiting_for_class, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_class(message: Message, state: FSMContext):
    await state.update_data(class_number=None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", reply_markup=skip_kb("–ê", "–ë", "–í", "–ì"))
    await state.set_state(UserProfileState.waiting_for_class_letter)


@router.message(UserProfileState.waiting_for_class)
async def process_class(message: Message, state: FSMContext):
    await state.update_data(class_number=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:", reply_markup=skip_kb("–ê", "–ë", "–í", "–ì"))
    await state.set_state(UserProfileState.waiting_for_class_letter)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã –∫–ª–∞—Å—Å–∞ ---
@router.message(UserProfileState.waiting_for_class_letter, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_class_letter(message: Message, state: FSMContext):
    await state.update_data(class_letter=None)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "- Telegram-–∞–∫–∫–∞—É–Ω—Ç\n"
        "- –°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
        "- –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=skip_kb()
    )
    await state.set_state(UserProfileState.waiting_for_contact_info)


@router.message(UserProfileState.waiting_for_class_letter)
async def process_class_letter(message: Message, state: FSMContext):
    await state.update_data(class_letter=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
        "- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "- Telegram-–∞–∫–∫–∞—É–Ω—Ç\n"
        "- –°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
        "- –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=skip_kb()
    )
    await state.set_state(UserProfileState.waiting_for_contact_info)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
@router.message(UserProfileState.waiting_for_contact_info)
async def process_contact_info(message: Message, state: FSMContext):
    contact_info = message.text.strip() if message.text and message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    await state.update_data(contact_info=contact_info)
    user_data = await state.get_data()
    role = user_data['role']
    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_subjects)
    else:
        await save_user_profile(message, state)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
@router.message(UserProfileState.waiting_for_subjects, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_subjects(message: Message, state: FSMContext):
    await state.update_data(subjects=None)
    await save_user_profile(message, state)


@router.message(UserProfileState.waiting_for_subjects)
async def process_subjects(message: Message, state: FSMContext):
    await state.update_data(subjects=message.text)
    await save_user_profile(message, state)


async def save_user_profile(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    role = user_data['role']
    full_name = user_data.get('full_name')
    class_number = user_data.get('class_number')
    class_letter = user_data.get('class_letter')
    contact_info = user_data.get('contact_info')
    subjects = user_data.get('subjects')

    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        current_user = await get_user_by_id(db, message.from_user.id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if full_name is None:
            full_name = current_user.full_name
        if class_number is None:
            class_number = current_user.class_number
        if class_letter is None:
            class_letter = current_user.class_letter
        if contact_info is None:
            contact_info = current_user.contact_info
        if subjects is None and hasattr(current_user, "subjects"):
            subjects = current_user.subjects

        await update_user_profile(db, message.from_user.id, full_name, class_number, class_letter, contact_info, role,
                                  subjects)

    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_kb(message.from_user.id))
    await state.clear()
