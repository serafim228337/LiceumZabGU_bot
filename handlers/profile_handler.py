import logging

from aiogram import Router, F
from aiogram.enums import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from database.db import get_db
from database.models import User
from keyboards.all_kb import main_kb, skip_kb
from services.db_operations import get_user_by_id

router = Router()
logger = logging.getLogger(__name__)
router.message.filter(F.chat.type == ChatType.PRIVATE)


class UserProfileState(StatesGroup):
    waiting_for_role = State()
    waiting_for_full_name = State()
    waiting_for_class = State()
    waiting_for_class_letter = State()
    waiting_for_subjects = State()
    waiting_for_contact_info = State()


async def clear_user_subjects(db, user_id: int):
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user_by_id(db, user_id)
    if user:
        user.subjects = None
        await db.commit()
        await db.refresh(user)
    return user


@router.message(F.text == "/cancel")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb(message.from_user.id))


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    await state.clear()
    async for db in get_db():
        user = await get_user_by_id(db, message.from_user.id)
        if not user:
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        profile_fields = []

        if user.full_name:
            profile_fields.append(f"–§–ò–û: {user.full_name}")

        if user.role:
            role_display = {
                '—É—á–µ–Ω–∏–∫': 'üë®‚Äçüéì –£—á–µ–Ω–∏–∫',
                '—É—á–∏—Ç–µ–ª—å': 'üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å',
                '—Ä–æ–¥–∏—Ç–µ–ª—å': 'üë™ –†–æ–¥–∏—Ç–µ–ª—å'
            }.get(user.role.lower(), user.role.capitalize())
            profile_fields.append(f"–†–æ–ª—å: {role_display}")

        if user.role == '—É—á–µ–Ω–∏–∫':
            class_info = []
            if user.class_number:
                class_info.append(user.class_number)
            if user.class_letter:
                class_info.append(user.class_letter)
            if class_info:
                profile_fields.append(f"–ö–ª–∞—Å—Å: {' '.join(class_info)}")

        if user.contact_info:
            profile_fields.append(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user.contact_info}")

        if user.role == '—É—á–∏—Ç–µ–ª—å' and user.subjects:
            profile_fields.append(f"–ü—Ä–µ–¥–º–µ—Ç—ã: {user.subjects}")

        profile_text = "üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" + "\n".join(profile_fields) if profile_fields else "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç."

        update_button = KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
        main_menu_button = KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        reply_kb = ReplyKeyboardMarkup(
            keyboard=[[update_button, main_menu_button]],
            resize_keyboard=True
        )
        await message.answer(profile_text, reply_markup=reply_kb)


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb(message.from_user.id))


@router.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
async def update_profile_callback(message: Message, state: FSMContext):
    await state.clear()
    role_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="–£—á–µ–Ω–∏–∫")],
            [KeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="/cancel")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=role_kb)
    await state.set_state(UserProfileState.waiting_for_role)


@router.message(UserProfileState.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    role = message.text.lower()
    if role not in ["—É—á–∏—Ç–µ–ª—å", "—É—á–µ–Ω–∏–∫", "—Ä–æ–¥–∏—Ç–µ–ª—å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.")
        return

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å —É—á–∏—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥—É—é —Ä–æ–ª—å
    current_data = await state.get_data()
    if current_data.get('role') == '—É—á–∏—Ç–µ–ª—å' and role != '—É—á–∏—Ç–µ–ª—å':
        async for db in get_db():
            await clear_user_subjects(db, message.from_user.id)

    await state.update_data(role=role)

    if role == "—É—á–µ–Ω–∏–∫":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_full_name)
    elif role == "—Ä–æ–¥–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_contact_info)
    elif role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_full_name)


@router.message(F.text == "–ù–∞–∑–∞–¥", UserProfileState.waiting_for_full_name)
@router.message(F.text == "–ù–∞–∑–∞–¥", UserProfileState.waiting_for_contact_info)
async def back_to_role_selection(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –µ—Å–ª–∏ –±—ã–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —É—á–∏—Ç–µ–ª—è
    data = await state.get_data()
    if data.get('role') == '—É—á–∏—Ç–µ–ª—å':
        async for db in get_db():
            await clear_user_subjects(db, message.from_user.id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
    role_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="–£—á–µ–Ω–∏–∫")],
            [KeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="/cancel")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=role_kb)
    await state.set_state(UserProfileState.waiting_for_role)


@router.message(UserProfileState.waiting_for_full_name, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=None)
    user_data = await state.get_data()
    role = user_data['role']

    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_contact_info)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:",
                             reply_markup=skip_kb("8", "9", "10", "11"))
        await state.set_state(UserProfileState.waiting_for_class)


@router.message(UserProfileState.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    user_data = await state.get_data()
    role = user_data['role']

    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_contact_info)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:",
                             reply_markup=skip_kb("8", "9", "10", "11"))
        await state.set_state(UserProfileState.waiting_for_class)


@router.message(UserProfileState.waiting_for_class, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_class(message: Message, state: FSMContext):
    await state.update_data(class_number=None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:",
                         reply_markup=skip_kb("–ê", "–ë", "–í", "–ì"))
    await state.set_state(UserProfileState.waiting_for_class_letter)


@router.message(UserProfileState.waiting_for_class)
async def process_class(message: Message, state: FSMContext):
    if message.text not in ["8", "9", "10", "11"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å.")
        return

    await state.update_data(class_number=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞:",
                         reply_markup=skip_kb("–ê", "–ë", "–í", "–ì"))
    await state.set_state(UserProfileState.waiting_for_class_letter)


@router.message(UserProfileState.waiting_for_class_letter, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_class_letter(message: Message, state: FSMContext):
    await state.update_data(class_letter=None)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                         reply_markup=skip_kb())
    await state.set_state(UserProfileState.waiting_for_contact_info)


@router.message(UserProfileState.waiting_for_class_letter)
async def process_class_letter(message: Message, state: FSMContext):
    if message.text not in ["–ê", "–ë", "–í", "–ì"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞.")
        return

    await state.update_data(class_letter=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                         reply_markup=skip_kb())
    await state.set_state(UserProfileState.waiting_for_contact_info)


@router.message(UserProfileState.waiting_for_contact_info)
async def process_contact_info(message: Message, state: FSMContext):
    contact_info = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    await state.update_data(contact_info=contact_info)

    user_data = await state.get_data()
    if user_data['role'] == '—É—á–∏—Ç–µ–ª—å':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                             reply_markup=skip_kb())
        await state.set_state(UserProfileState.waiting_for_subjects)
    else:
        await save_user_profile(message, state)


@router.message(UserProfileState.waiting_for_subjects, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_subjects(message: Message, state: FSMContext):
    await state.update_data(subjects=None)
    await save_user_profile(message, state)


@router.message(UserProfileState.waiting_for_subjects)
async def process_subjects(message: Message, state: FSMContext):
    await state.update_data(subjects=message.text)
    await save_user_profile(message, state)


async def save_user_profile(message: Message, state: FSMContext):
    user_data = await state.get_data()

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã, –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —É—á–∏—Ç–µ–ª—å
    if user_data.get('role') != '—É—á–∏—Ç–µ–ª—å':
        user_data['subjects'] = None

    async for db in get_db():
        current_user = await get_user_by_id(db, message.from_user.id)

        update_data = {
            'full_name': user_data.get('full_name', current_user.full_name if current_user else None),
            'class_number': user_data.get('class_number'),
            'class_letter': user_data.get('class_letter'),
            'contact_info': user_data.get('contact_info'),
            'role': user_data['role'],
            'subjects': user_data.get('subjects')
        }

        if current_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for key, value in update_data.items():
                setattr(current_user, key, value)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user = User(
                id=message.from_user.id,
                username=message.from_user.username,
                **update_data
            )
            db.add(current_user)

        await db.commit()
        await db.refresh(current_user)

    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_kb(message.from_user.id))
    await state.clear()
