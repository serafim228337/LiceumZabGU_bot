from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.db import get_db
from keyboards.all_kb import main_kb
from services.db_operations import get_user_by_id, update_user_profile

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
class UserProfileState(StatesGroup):
    waiting_for_role = State()  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è —Ä–æ–ª–∏
    waiting_for_full_name = State()
    waiting_for_class = State()
    waiting_for_class_letter = State()
    waiting_for_phone_number = State()
    waiting_for_subjects = State()  # –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—á–∏—Ç–µ–ª—è


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, state: FSMContext):
    async for db in get_db():
        user = await get_user_by_id(db, message.from_user.id)
        if user:
            role = user.role.capitalize() if user.role else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
            class_number = user.class_number if user.role == '—É—á–µ–Ω–∏–∫' else 'N/A'
            class_letter = user.class_letter if user.role == '—É—á–µ–Ω–∏–∫' else 'N/A'
            phone_number = user.phone_number if user.phone_number else '–ù–µ —É–∫–∞–∑–∞–Ω'

            profile_text = (
                f"–§–ò–û: {user.full_name}\n"
                f"–ö–ª–∞—Å—Å: {class_number}\n"
                f"–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞: {class_letter}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
                f"–†–æ–ª—å: {role}\n"
            )
        else:
            profile_text = "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        update_button = KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
        reply_kb = ReplyKeyboardMarkup(keyboard=[[update_button]], resize_keyboard=True)

        await message.answer(profile_text, reply_markup=reply_kb)

@router.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è")
async def update_profile_callback(message: Message, state: FSMContext):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role_button_1 = KeyboardButton(text="–£—á–∏—Ç–µ–ª—å")
    role_button_2 = KeyboardButton(text="–£—á–µ–Ω–∏–∫")
    role_button_3 = KeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å")
    role_kb = ReplyKeyboardMarkup(keyboard=[[role_button_1], [role_button_2], [role_button_3]], resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–£—á–∏—Ç–µ–ª—å, –£—á–µ–Ω–∏–∫, –†–æ–¥–∏—Ç–µ–ª—å):", reply_markup=role_kb)
    await state.set_state(UserProfileState.waiting_for_role)

@router.message(UserProfileState.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    role = message.text.lower()

    if role == "—É—á–µ–Ω–∏–∫":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())  # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.set_state(UserProfileState.waiting_for_full_name)
    elif role == "—Ä–æ–¥–∏—Ç–µ–ª—å":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
        skip_button = KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        phone_kb = ReplyKeyboardMarkup(keyboard=[[skip_button]], resize_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=phone_kb)
        await state.set_state(UserProfileState.waiting_for_phone_number)
    elif role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())  # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.set_state(UserProfileState.waiting_for_full_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(role=role)

@router.message(UserProfileState.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)

    # –ï—Å–ª–∏ —Ä–æ–ª—å —É—á–∏—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥–∏ —Å –∫–ª–∞—Å—Å–æ–º –∏ –±—É–∫–≤–æ–π
    user_data = await state.get_data()
    role = user_data['role']
    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=ReplyKeyboardRemove())  # –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await state.set_state(UserProfileState.waiting_for_subjects)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        class_buttons = [
            [KeyboardButton(text="8"), KeyboardButton(text="9")],
            [KeyboardButton(text="10"), KeyboardButton(text="11")]
        ]
        class_kb = ReplyKeyboardMarkup(keyboard=class_buttons, resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=class_kb)
        await state.set_state(UserProfileState.waiting_for_class)

@router.message(UserProfileState.waiting_for_class)
async def process_class(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    await state.update_data(class_number=message.text)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã –∫–ª–∞—Å—Å–∞
    class_letter_buttons = [
        [KeyboardButton(text="–ê"), KeyboardButton(text="–ë")],
        [KeyboardButton(text="–í"), KeyboardButton(text="–ì")]
    ]
    class_letter_kb = ReplyKeyboardMarkup(keyboard=class_letter_buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:", reply_markup=class_letter_kb)
    await state.set_state(UserProfileState.waiting_for_class_letter)

@router.message(UserProfileState.waiting_for_class_letter)
async def process_class_letter(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±—É–∫–≤—ã –∫–ª–∞—Å—Å–∞
    await state.update_data(class_letter=message.text)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    skip_button = KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    phone_kb = ReplyKeyboardMarkup(keyboard=[[skip_button]], resize_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=phone_kb)
    await state.set_state(UserProfileState.waiting_for_phone_number)

@router.message(UserProfileState.waiting_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    phone_number = message.text.strip() if message.text and message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None  # –ï—Å–ª–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ None

    await state.update_data(phone_number=phone_number)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_data = await state.get_data()
    role = user_data['role']

    if role == "—É—á–∏—Ç–µ–ª—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(UserProfileState.waiting_for_subjects)
    else:
        await save_user_profile(message, state)

@router.message(UserProfileState.waiting_for_subjects)
async def process_subjects(message: Message, state: FSMContext):
    await state.update_data(subjects=message.text)
    await save_user_profile(message, state)

async def save_user_profile(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    role = user_data['role']
    full_name = user_data.get('full_name')
    class_number = user_data.get('class_number')
    class_letter = user_data.get('class_letter')
    phone_number = user_data.get('phone_number')
    subjects = user_data.get('subjects')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async for db in get_db():
        print(db, message.from_user.id, full_name, class_number, class_letter, phone_number, role, subjects)
        await update_user_profile(db, message.from_user.id, full_name, class_number, class_letter, phone_number, role, subjects)

    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_kb(message.from_user.id))
    await state.clear()
